{
    "description": "_description",
    "processors": [
      {
        "set": {
          "field": "event.ingested",
          "value": "{{_ingest.timestamp}}"
        }
      },
      {
        "grok": {
          "description": "Parse the header and timestamp",
          "field": "message",
          "patterns": [
            "%{PIHOLEHEADER}:\\s+%{GREEDYDATA:log.original}"
          ],
          "pattern_definitions": {
            "PIHOLEHEADER": "%{SYSLOGTIMESTAMP:_temp_.raw_date}\\s+%{SYSLOGPROG}"
          },
          "ecs_compatibility": "v1"
        }
      },
      {
        "grok": {
          "field": "log.original",
          "patterns": [
            "%{PIHOLEDNSLOGLINE}"
          ],
          "pattern_definitions": {
            "PIHOLEDNSLOGLINE": "%{INT:serial}\\s+%{IP:source.ip}/%{INT:source.port}\\s+%{PIHOLEDNSRESPONSE:dns.op_code}\\s+%{GREEDYDATA:dns.question.name}\\s(to|from|is)\\s",
            "PIHOLEDNSRESPONSE": "reply|query\\[.*?\\]|forwarded|cached|gravity\\sblocked",
            "PIHOLERESOLVED": "%{PIHOLECNAME:dns.answers.name}|%{IP:dns.resolved_ip",
            "PIHOLECNAME": "<CNAME>"
          },
          "ecs_compatibility": "v1",
          "trace_match": true
        }
      },
      {
        "date": {
          "if": "ctx.event?.timezone == null && ctx._temp_?.raw_date != null",
          "field": "_temp_.raw_date",
          "target_field": "@timestamp",
          "formats": [
            "ISO8601",
            "MMM  d HH:mm:ss",
            "MMM dd HH:mm:ss",
            "EEE MMM  d HH:mm:ss",
            "EEE MMM dd HH:mm:ss",
            "MMM  d HH:mm:ss z",
            "MMM dd HH:mm:ss z",
            "EEE MMM  d HH:mm:ss z",
            "EEE MMM dd HH:mm:ss z",
            "MMM  d yyyy HH:mm:ss",
            "MMM dd yyyy HH:mm:ss",
            "EEE MMM  d yyyy HH:mm:ss",
            "EEE MMM dd yyyy HH:mm:ss",
            "MMM  d yyyy HH:mm:ss z",
            "MMM dd yyyy HH:mm:ss z",
            "EEE MMM  d yyyy HH:mm:ss z",
            "EEE MMM dd yyyy HH:mm:ss z"
          ],
          "on_failure": [
            {
              "append": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      }
    ],
    "on_failure": [
      {
        "set": {
          "field": "error.message",
          "value": "{{ _ingest.on_failure_message }}"
        }
      }
    ]
}
